system.categoryDictionary.categorizeDictionary('type', (
		'Collections-Arrayed': [
			'Array',
			'ArrayBuffer',
			'ByteArray',
			'Float64Array',
			'SortedArray'
		],
		'Collections-Ordered': [
			'Interval',
			'PriorityQueue'
		],
		'Collections-Streams': [
			'ReadStream',
			'WriteStream'
		],
		'Collections-Unordered': [
			'Association',
			'Bag',
			'Graph',
			'Map',
			'Record',
			'Set',
			'WeakMap'
		],
		'Kernel-Logic': [
			'Boolean'
		],
		'Kernel-Objects': [
			'Nil',
			'Void'
		],
		'Kernel-Behaviour': [
			'Procedure',
			'Promise'
		],
		'Kernel-Exceptions': [
			'Error'
		],
		'Kernel-Chronology': [
			'Date',
			'Duration',
			'TimeStamp'
		],
		'Kernel-Numbers': [
			'Complex',
			'Fraction',
			'LargeInteger',
			'SmallFloat'
		],
		'Kernel-Text': [
			'Character',
			'RegExp',
			'String',
			'Transcript'
		],
		'Kernel-Geometry': [
			'Matrix22',
			'Matrix33',
			'PolarPoint',
			'Projection3',
			'Rectangle',
			'Vector2',
			'Vector3',
			'Vector4'
		],
		'Kernel-Graphics': [
			'Colour'
		],
		'Data-Chemistry': [
			'CrystalLatticeStructure'
		],
		'Music-Tuning': [
			'JiTuning'
		],
		'Sound-Osc': [
			'OscBundle',
			'OscMessage',
			'OscParameter'
		],
		'Sound-Sc': [
			'CcEvent',
			'Clock',
			'Env',
			'LocalControl',
			'ScSynth',
			'ScSynthOptions',
			'ScUgen',
			'Ugen',
			'UgenGraph'
		],
		'System': [
			'Blob',
			'File',
			'LibraryItem',
			'Method',
			'Response',
			'Storage',
			'System',
			'Trait',
			'Type',
			'URL',
			'URLSearchParams',
			'Window'
		],
		'SmallKansas': [
			'ColourChooser',
			'ColumnBrowser',
			'AnalogueClock',
			'Frame',
			'HelpSystem',
			'Inspector',
			'ListChooser',
			'Menu',
			'MenuItem',
			'PngViewer',
			'SmallKansas',
			'SvgViewer',
			'TableViewer',
			'TextEditor',
			'TranscriptViewer'
		],
		'Navigator': [
			'Location',
			'Navigator'
		],
		'Navigator-Node': [
			'Attr',
			'NamedNodeMap',
			'NodeList',
			'Range',
			'Selection',
			'Text'
		],
		'Navigator-Canvas': [
			'CanvasGradient',
			'CanvasPattern',
			'CanvasRenderingContext2D',
			'OffscreenCanvas',
			'OffscreenCanvasRenderingContext2D',
			'Path2D'
		],
		'Navigator-Css': [
			'CSSStyleDeclaration',
			'CSS2Properties'
		],
		'Navigator-Dom': [
			'DOMMatrix',
			'DOMMatrixReadOnly',
			'DOMParser',
			'DOMPoint',
			'DOMPointReadOnly',
			'DOMRect',
			'DOMTokenList'
		],
		'Navigator-Event': [
			'CustomEvent',
			'Event',
			'KeyboardEvent',
			'MouseEvent',
			'PointerEvent'
		],
		'Navigator-Html': [
			'HTMLBodyElement',
			'HTMLButtonElement',
			'HTMLCanvasElement',
			'HTMLCollection',
			'HTMLDialogElement',
			'HTMLDivElement',
			'HTMLDocument',
			'HTMLElement',
			'HTMLHeadingElement',
			'HTMLImageElement',
			'HTMLInputElement',
			'HTMLLIElement',
			'HTMLOptionElement',
			'HTMLOptionsCollection',
			'HTMLParagraphElement',
			'HTMLPreElement',
			'HTMLSelectElement',
			'HTMLSpanElement',
			'HTMLTableCellElement',
			'HTMLTableColElement',
			'HTMLTableElement',
			'HTMLTableRowElement',
			'HTMLTableSectionElement',
			'HTMLTextAreaElement',
			'HTMLUListElement'
		],
		'Navigator-Image': [
			'ImageBitmap',
			'ImageData'
		],
		'Navigator-Media': [
			'MediaSource'
		],
		'Navigator-Midi': [
			'MIDIAccess',
			'MIDIConnectionEvent',
			'MIDIInput',
			'MIDIInputMap',
			'MIDIMessageEvent',
			'MIDIOutput',
			'MIDIOutputMap'
		],
		'Navigator-Svg': [
			'SVGCircleElement',
			'SVGGElement',
			'SVGLineElement',
			'SVGPathElement',
			'SVGPointList',
			'SVGPolygonElement',
			'SVGPolylineElement',
			'SVGRectElement',
			'SVGSVGElement',
			'SVGTextElement',
			'SVGTextPathElement',
			'SVGTitleElement',
			'SVGTransform',
			'SVGTransformList'
		],
		'Navigator-WebGl': [
			'WebGLRenderingContext'
		],
		'Navigator-Xml': [
			'XMLDocument'
		]
));

(* method categories *)
system.categoryDictionary.categorizeDictionary('method', { :each | each.asMethodName }, (
		'accessing': [
			'allButFirst'
			'allButLast'
			'any'
			'anyAs'
			'anyOne'
			'asciiValue'
			'associationAt'
			'associationAtIfAbsent'
			'associations'
			'associationsRemove'
			'associationsSelect'
			'at'
			'atAll'
			'atAllPut'
			'atAllPutAll'
			'atIfAbsent'
			'atIfAbsentPut'
			'atIfPresent'
			'atIfPresentIfAbsent'
			'atIfPresentIfAbsentPut'
			'atIncrementBy'
			'atModify'
			'atPath'
			'atPathPut'
			'atPin'
			'atPut'
			'atRandom'
			'atRandomBy'
			'atWrap'
			'atWrapPut'
			'basicAt'
			'basicAtPut'
			'basicNext'
			'binary'
			'capacity'
			'codePoint'
			'contents'
			'cumulativeCounts'
			'digitValue'
			'first'
			'fromToPut'
			'imaginary'
			'in'
			'indexOf'
			'indexOfIfAbsent'
			'indexOfStartingAt'
			'indexOfSubCollection'
			'indexOfSubCollectionStartingAt'
			'indexOfSubCollectionStartingAtIfAbsent'
			'indexValueAssociations'
			'indices'
			'indicesSorted'
			'key'
			'keyAtValue'
			'keyAtValueIfAbsent'
			'keyValue'
			'keys'
			'keysInOrder'
			'keysSorted'
			'last'
			'lastIndexOf'
			'lastIndexOfIfAbsent'
			'lastIndexOfStartingAt'
			'lastIndexOfStartingAtIfAbsent'
			'middle'
			'name'
			'next'
			'nextInto'
			'nextIntoStartingAt'
			'nextPut'
			'nextPutAll'
			'nextSatisfy'
			'numArgs'
			'peek'
			'peekPriority'
			'real'
			'replaceFromToWith'
			'replaceFromToWithStartingAt'
			'second'
			'second'
			'secondLast'
			'setContents'
			'size'
			'slotNameArray'
			'sortBlock'
			'sortedCounts'
			'sortedElements'
			'string'
			'swapWith'
			'take'
			'third'
			'thirdLast'
			'top'
			'upToEnd'
			'upToPosition'
			'unlines'
			'values'
			'valuesAndCounts'
			'w'
			'x'
			'xy'
			'xyz'
			'y'
			'z'
		],
		'accessing-string': [
			'codePointAt'
			'findString'
		],
		'accessing-time': [
			'centiseconds'
			'days'
			'dayOfMonth'
			'dayOfWeek'
			'hour'
			'hours'
			'julianYears'
			'milliseconds'
			'minutes'
			'month'
			'offsetSeconds'
			'seconds'
			'siderealMonths'
			'siderealYears'
			'solarMonths'
			'solarYears'
			'unixTime'
			'unixTimeInMilliseconds'
			'week'
			'weeks'
			'year'
		],
		'adding': [
			'add'
			'addAfter'
			'addAfterIndex'
			'addAllFirst'
			'addAllLast'
			'addArrayFirst'
			'addArrayLast'
			'addBefore'
			'addAll'
			'addAllFirstTo'
			'addAllIfNotPresent'
			'addIfNotPresent'
			'addWithOccurrences'
			'addFirst'
			'addLast'
			'ifAbsentAdd'
			'push'
			'pushAll'
		],
		'arithmetic operators': [
			'%' (* modulo *)
			'*' (* times *)
			'^' (* raisedTo *)
			'+' (* plus *)
			'-' (* minus *)
			'/' (* dividedBy *)
			'//'
			'\\\\'
			'*='
			'+='
			'/='
			'-='
		],
		'bit manipulation': [
			'<<'
			'>>'
			'bitAnd'
			'bitAt'
			'bitCount'
			'bitCountOfByte'
			'bitNot'
			'bitOr'
			'bitShift'
			'bitShiftLeft'
			'bitShiftRight'
			'bitTest'
			'bitXor'
			'highBit'
			'highBitOfByte'
			'highBitOfMagnitude'
			'highBitOfPositiveReceiver'
			'lowBit'
		],
		'comparing': [
			'!~'
			'<' (* lessThan *)
			'<='
			'<=>'
			'<~'
			'=' (* equals *)
			'=='
			'>' (* greaterThan *)
			'>='
			'>~'
			'~' (* tilde *)
			'~='
			'~~'
			'betweenAnd'
			'closeTo'
			'closeToBy'
			'crc16'
			'equalsBy'
			'exclusivelyBetweenAnd'
			'hasEqualElements'
			'hasEqualElementsBy'
			'inclusivelyBetweenAnd'
			'inRangeOfAnd'
			'sameAs'
			'veryCloseTo'
		],
		'controlling': [
			'caseOf'
			'caseOfOtherwise'
			'if'
			'ifEmpty'
			'ifEmptyIfNotEmptyDo'
			'ifFalse'
			'ifNil'
			'ifNotNil'
			'ifNotEmptyDo'
			'ifTrue'
			'repeat'
			'whileTrue'
			'whileFalse'
			'doWhile'
			'doWhileTrue'
			'doWhileFalse'
		],
		'converting': [
			'adaptToCollectionAndApply'
			'adaptToComplexAndApply'
			'adaptToFractionAndApply'
			'adaptToNumberAndApply'
			'adaptToPointAndApply'
			'asAscii'
			'asBit'
			'asComplex'
			'asFraction'
			'asHex'
			'asHexDigit'
			'asInteger'
			'asLowercase'
			'asNumber'
			'asPoint'
			'asRegExp'
			'asSeconds'
			'asTimeStamp'
			'asUppercase'
			'asUrl'
			'capitalized'
			'concatenation'
			'flattened'
			'histogramOf'
			'i'
			'iso8601'
			'join'
			'joinCharacters'
			'joinSeparatedBy'
			'joinStringsSeparatedBy'
			'localeTimeString'
			'radiansToDegrees'
			'degreesToRadians'
			'reverse'
			'romanNumber'
			'threeDigitName'
			'toArray'
		],
		'converting-string': [
			'asciiByteArray'
			'characterArray'
			'codePointArray'
			'lines'
			'paragraphs'
			'stringArray'
			'toLowercase'
			'toUppercase'
			'utf8ByteArray'
			'utf16Array'
			'utf16CodePointAt'
			'withBlanksTrimmed'
			'withoutLeadingBlanks'
			'withoutTrailingBlanks'
			'words'
		],
		'copying': [
			'++'
			'appendString'
			'copy'
			'copyAfterLast'
			'copyAfter'
			'copyEmpty'
			'copyFromTo'
			'copyReplaceAllWith'
			'copyReplaceFromToWith'
			'copyWith'
			'copyWithFirst'
			'copyWithoutFirst'
			'copyWithout'
			'copyWithoutAll'
			'deepCopy'
			'forceToPaddingWith'
			'grownBy'
			'postCopy'
			'reversed'
			'reversed'
			'shallowCopy'
			'veryDeepCopy'
			'withoutDuplicates'
		],
		'delegating': [
			'atDelegateTo'
			'atDelegateToIfAbsent'
			'atPutDelegateTo'
			'atPutDelegateToIfAbsent'
			'messageSend'
		],
		'encoding': [
			'base64Decoded'
		],
		'enumerating': [
			'allButFirstDo'
			'allButLastDo'
			'associationsDo'
			'collect'
			'collectAs'
			'collectFromTo'
			'collectInto'
			'collectThenDo'
			'collectThenSelect'
			'combinationsAtATimeDo'
			'count'
			'countAll'
			'detect'
			'detectIfFound'
			'detectIfFoundIfNone'
			'detectIfNone'
			'detectIndex'
			'detectMax'
			'detectMin'
			'detectSum'
			'do'
			'doSeparatedBy'
			'doWithout'
			'findFirst'
			'findFirstElement'
			'findLast'
			'foldLeft'
			'foldRight'
			'fromToDo'
			'groupBy'
			'groupsDo'
			'indicesDo'
			'injectInto'
			'keysAndValuesDo'
			'keysDo'
			'map'
			'occurrencesOf'
			'pairsDo'
			'pairsCollect'
			'permutations'
			'permutationsDo'
			'reduce'
			'reject'
			'rejectThenDo'
			'replace'
			'reverseDo'
			'reverseWithDo'
			'select'
			'selectThenCollect'
			'selectThenDo'
			'splitBy'
			'timesRepeat'
			'valuesDo'
			'withCollect'
			'withDo'
			'withIndexCollect'
			'withIndexDo'
			'withReplace'
		],
		'error handling': [
			'assert'
			'caseError'
			'emptyCheck'
			'error'
			'errorEmptyCollection'
			'errorInvalidIndex'
			'errorNotFound'
			'errorNotIndexed'
			'isOfSameSizeCheck'
			'shouldBeImplemented'
			'shouldNotImplement'
			'signal'
			'typeResponsibility'
			'warning'
		],
		'evaluating': [
			'cull'
			'evaluate'
			'ifError'
			'value'
			'valueWithArguments'
			'valueWithReturn'
		],
		'instance creation': [
			'Array'
			'ArrayBuffer'
			'Association'
			'Bag'
			'Bitset'
			'ByteArray'
			'Character'
			'Complex'
			'Date'
			'Duration'
			'Error'
			'Float64Array'
			'Fraction'
			'Frequency'
			'Heap'
			'Interval'
			'LargeInteger'
			'LinkedList'
			'Map'
			'PriorityQueue'
			'Promise'
			'Random'
			'ReadStream'
			'Record'
			'RegExp'
			'RunArray'
			'Set'
			'SortedArray'
			'Stack'
			'String'
			'TimeStamp'
			'Transcript'
			'WeakMap'
			'WriteStream'
			'new'
			'ofSize'
			'species'
		],
		'intervals': [
			'downToDo'
			'thenTo'
			'toDo'
			'toByDo'
			'to'
			'toBy'
			'upTo'
			'downTo'
			'upOrDownTo'
			'upToDo'
		],
		'logic operator': [
			'&&'
			'&'
			'not'
			'|'
			'||'
			'==>'
			'xor'
		],
		'matching': [
			'allRegExpMatches'
			'matchesRegExp'
			'splitRegExp'
		],
		'mathematical functions': [
			'abs'
			'abs'
			'absSquared'
			'arcCos'
			'arcSin'
			'arcTan'
			'arg'
			'atan2'
			'average'
			'conjugated'
			'cos'
			'cosh'
			'cubeRoot'
			'cubed'
			'degreeCos'
			'degreeSin'
			'denominator'
			'exp'
			'gcd'
			'halved'
			'lcm'
			'log'
			'log10'
			'log2'
			'max'
			'mean'
			'min'
			'minMax'
			'negated'
			'negative'
			'normalize'
			'numerator'
			'pow'
			'product'
			'quotient'
			'raisedToInteger'
			'range'
			'reciprocal'
			'remainder'
			'signBit'
			'sin'
			'sinh'
			'sqrt'
			'squared'
			'squaredNorm'
			'sum'
			'tan'
			'tanh'
			'twice'
		],
		'message handling': [
			'perform'
		],
		'parsing': [
			'parseFraction'
			'parseHexString'
			'parseInteger'
			'parseJson'
			'parseLargeInteger'
			'parseNumber'
		],
		'positioning': [
			'backUpTo'
			'position'
			'pushBack'
			'reset'
			'resetToStart'
			'setToEnd'
			'skip'
			'skipTo'
		],
		'prime numbers': [
			'isCoprime'
			'nextPrime'
			'nthPrime'
			'primeFactorization'
			'primeFactors'
			'primeLimit'
			'primesArray'
			'primesArrayExtend'
			'primesUpTo'
			'primesUpToDo'
		],
		'printing': [
			'asString'
			'asStringWithCommas'
			'description'
			'hex'
			'messageText'
			'postLine'
			'printString'
			'printStringConcise'
			'printStringHex'
			'printStringLimitedTo'
			'printStringRoman'
			'storeString'
		],
		'private': [
			'fillFromWith'
			'indexForInserting'
			'initializeSlots'
			'pseudoSlotNameArray'
			'reduced'
		],
		'random': [
			'randomFloat'
			'randomInteger'
		],
		'removing': [
			'keysAndValuesRemove'
			'pop'
			'remove'
			'removeAll'
			'removeAllAndShrink'
			'removeAllFoundIn'
			'removeAllSuchThat'
			'removeAssociation'
			'removeAt'
			'removeFirst'
			'removeIfAbsent'
			'removeKey'
			'removeKeyIfAbsent'
			'removeLast'
		],
		'scheduling': [
			'allResolved'
			'allSettled'
			'anyResolved'
			'anySettled'
			'cancel'
			'schedule'
			'scheduleInjecting'
			'then'
			'thenElse'
		],
		'serialization': [
			'json'
		],
		'set logic': [
			'difference'
			'intersection'
			'symmetricDifference'
			'union'
		],
		'shuffling': [
			'fisherYatesShuffle'
			'fisherYatesShuffleBy'
			'shuffle'
			'shuffleBy'
			'shuffled'
			'shuffledBy'
		],
		'sorting': [
			'sortBy'
			'sorted'
			'sort'
			'withKeysSorted'
		],
		'testing': [
			'isBinary'
			'isCollection'
			'isError'
			'isIndexable'
			'isLiteral'
			'isNil'
			'isNumber'
			'isStream'
		],
		'testing-stream': [
			'atEnd'
		],
		'testing-collection': [
			'allEqual'
			'allEqualBy'
			'allSatisfy'
			'anySatisfy'
			'contains'
			'doesNotInclude'
			'includes'
			'includesAllOf'
			'includesAnyOf'
			'includesAssociation'
			'includesIdentity'
			'includesIndex'
			'includesKey'
			'isDictionary'
			'isEmpty'
			'isEmptyOrNil'
			'isSequenceable'
			'noneSatisfy'
			'notEmpty'
		],
		'testing-sequenceable': [
			'beginsWith'
			'beginsWithAnyOf'
			'endsWith'
			'endsWithAnyOf'
			'isOctetSequence'
			'isSeries'
			'isSeriesBy'
			'isSorted'
			'isSortedBetweenAnd'
			'isSortedBy'
			'isSortedByBetweenAnd'
		],
		'testing-number': [
			'clamp'
			'clampHigh'
			'clampLow'
			'even'
			'isByte'
			'isFinite'
			'isInteger'
			'isNaN'
			'isNegative'
			'isPositive'
			'isPowerOfTwo'
			'isPrime'
			'isSmallInteger'
			'isStrictlyPositive'
			'isZero'
			'odd'
			'positive'
			'sign'
			'strictlyPositive'
		],
		'testing-string': [
			'includesSubstring'
			'isUtf16SurrogateCode'
			'isAscii'
			'isAsciiCodePoint'
			'isAsciiString'
			'isAllDigits'
			'isInBasicMultilingualPlane'
			'isLowercase'
			'isSingleCharacter'
			'isUppercase'
			'isWellFormed'
		],
		'testing-colour': [
			'isBlack'
			'isBlue'
			'isCyan'
			'isGreen'
			'isMagenta'
			'isOpaque'
			'isRed'
			'isTransparent'
			'isWhite'
			'isYellow'
			'isGrey'
			'isGreyOf'
		],
		'timing': [
			'millisecondsToRun'
		],
		'truncating and rounding': [
			'asLargerPowerOfTwo'
			'asPowerOfTwo'
			'asSmallerPowerOfTwo'
			'ceiling'
			'floor'
			'fractionPart'
			'rounded'
			'roundDownTo'
			'roundTo'
			'roundUpTo'
			'truncated'
			'truncateTo'
		],
		'type predicate': [
			'isArray'
			'isArrayBuffer'
			'isAssociation'
			'isBag'
			'isBitset'
			'isBoolean'
			'isByteArray'
			'isCharacter'
			'isColour'
			'isComplex'
			'isDate'
			'isDuration'
			'isFloat64Array'
			'isFraction'
			'isFrequency'
			'isHeap'
			'isInterval'
			'isLargeInteger'
			'isLinkedList'
			'isMap'
			'isPriorityQueue'
			'isProcedure'
			'isPromise'
			'isRandom'
			'isReadStream'
			'isRecord'
			'isRegExp'
			'isRunArray'
			'isSet'
			'isSmallFloat'
			'isSortedArray'
			'isStack'
			'isString'
			'isTimeStamp'
			'isTranscript'
			'isWeakMap'
			'isWriteStream'
		],
		'accessing-colour': [
			'alpha'
			'blue'
			'green'
			'red'
		],
		'converting-colour': [
			'asNontranslucentColor'
			'fromSrgb'
			'hexString'
			'toSrgb'
		],
		'mathematical functions-colour': [
			'over'
		]
))

