{
	"name": "Spl",
	"scopeName": "source.spl",
	"fileTypes": [
		".spl"
	],
	"name": "Spl",
	"patterns": [
		{
			"include": "#statements"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#declaration"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"let-expr": {
			"name": "meta.let.expr.spl",
			"begin": "(?<!\\.|\\$)\\b(let)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.spl"
				}
			},
			"end": ";",
			"patterns": [
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"expression": {
			"name": "meta.expression.spl",
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#paren-expression"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-accessor"
				}
			]
		},
		"declaration": {
			"name": "meta.declaration.spl",
			"patterns": [
				{
					"include": "#let-expr"
				}
			]
		},
		"variable-initializer": {
			"begin": "(?<!=|!)(=)(?!=)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.assignment.spl"
				}
			},
			"end": "(?=$|[,);}\\]])",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"function-call": {
			"begin": "(?=(\\.\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
			"end": "(?<=\\))(?!(\\.\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
			"patterns": [
				{
					"name": "punctuation.accessor.spl",
					"match": "\\."
				},
				{
					"name": "entity.name.function.spl",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#paren-expression"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "support.class.spl",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
				},
				{
					"match": "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.spl"
						},
						"2": {
							"name": "constant.other.object.property.spl"
						},
						"3": {
							"name": "variable.other.object.property.spl"
						}
					}
				},
				{
					"match": "(?x)(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*( (async\\s+)|(function\\s*[(<])|(function\\s+)| ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)| ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)))",
					"captures": {
						"1": {
							"name": "punctuation.accessor.spl"
						},
						"2": {
							"name": "entity.name.function.spl"
						}
					}
				},
				{
					"match": "(\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
					"captures": {
						"1": {
							"name": "punctuation.accessor.spl"
						},
						"2": {
							"name": "constant.other.property.spl"
						}
					}
				},
				{
					"match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.spl"
						},
						"2": {
							"name": "variable.other.property.spl"
						}
					}
				},
				{
					"match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "constant.other.object.spl"
						},
						"2": {
							"name": "variable.other.object.spl"
						}
					}
				},
				{
					"name": "constant.other.spl",
					"match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
				},
				{
					"name": "variable.other.readwrite.spl",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.bitwise.shift.spl",
					"match": "<<|>>"
				},
				{
					"name": "keyword.operator.comparison.spl",
					"match": "=|!=|==|!=="
				},
				{
					"name": "keyword.operator.relational.spl",
					"match": "<=|>=|<>|<|>"
				},
				{
					"name": "keyword.operator.logical.spl",
					"match": "\\&|\\|"
				},
				{
					"name": "keyword.operator.assignment.spl",
					"match": ":\\="
				},
				{
					"name": "keyword.operator.arithmetic.spl",
					"match": "%|\\*|/|-|\\+|\\^|\\!"
				}
			]
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.spl",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.spl",
			"match": ";"
		},
		"punctuation-accessor": {
			"name": "punctuation.accessor.spl",
			"match": "\\."
		},
		"paren-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.spl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.spl"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"qstring-double": {
			"name": "string.quoted.double.spl",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.spl"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.spl"
				},
				"2": {
					"name": "invalid.illegal.newline.spl"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"qstring-single": {
			"name": "string.quoted.single.spl",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.spl"
				}
			},
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.spl"
				},
				"2": {
					"name": "invalid.illegal.newline.spl"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"include": "#qstring-single"
				},
				{
					"include": "#qstring-double"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.spl",
			"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		},
		"literal": {
			"name": "literal.spl",
			"patterns": [
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#nil-literal"
				},
				{
					"include": "#numericConstant-literal"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#block-literal"
				},
				{
					"include": "#self-literal"
				}
			]
		},
		"block-literal": {
			"name": "meta.block.literal.spl",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.spl"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.spl"
				}
			},
			"patterns": [
				{
					"include": "#block-arguments"
				},
				{
					"include": "#statements"
				}
			]
		},
		"block-literal-arguments": {
			"name": "meta.block.literal.arguments.spl",
			"begin": "\\s*\\:",
			"end": "(\\|)",
			"endCaptures": {
				"0": {
					"name": "storage.type.spl"
				}
			},
			"patterns": [
				{
					"match": "\\:([a-zA-Z0-9]+)",
					"captures": {
						"0": {
							"name": "variable.parameter.spl"
						}
					}
				}
			]
		},
		"array-literal": {
			"name": "meta.array.literal.spl",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.spl"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.spl"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.spl",
					"match": "\\b(?<!\\$)16r[0-9a-fA-F]+\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.binary.spl",
					"match": "\\b(?<!\\$)2r[01]+\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.octal.spl",
					"match": "\\b(?<!\\$)8r[0-7]+\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.decimal.spl",
					"match": "\\b(\\d(?>_?\\d)*(\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?(e[-+]?\\d(?>_?\\d)*)?)\\b"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.spl",
					"match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
				},
				{
					"name": "constant.language.boolean.false.spl",
					"match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
				}
			]
		},
		"nil-literal": {
			"name": "constant.language.nil.spl",
			"match": "(?<!\\.|\\$)\\bnil\\b(?!\\$)"
		},
		"self-literal": {
			"name": "variable.language.self.spl",
			"match": "(?<!\\.|\\$)\\bself\\b(?!\\$)"
		},
		"numericConstant-literal": {
			"patterns": [
				{
					"name": "constant.language.nan.spl",
					"match": "(?<!\\.|\\$)\\bNaN\\b(?!\\$)"
				},
				{
					"name": "constant.language.infinity.spl",
					"match": "(?<!\\.|\\$)\\b(Infinity|inf)\\b(?!\\$)"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.spl",
					"begin": "{\\-",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.spl"
						}
					},
					"end": "\\-}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.spl"
						}
					}
				}
			]
		}
	}
}
